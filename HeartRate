// LCD pin definitions
sbit LCD_RS at RD2_bit;
sbit LCD_EN at RD3_bit;
sbit LCD_D4 at RD4_bit;
sbit LCD_D5 at RD5_bit;
sbit LCD_D6 at RD6_bit;
sbit LCD_D7 at RD7_bit;

sbit LCD_RS_Direction at TRISD2_bit;
sbit LCD_EN_Direction at TRISD3_bit;
sbit LCD_D4_Direction at TRISD4_bit;
sbit LCD_D5_Direction at TRISD5_bit;
sbit LCD_D6_Direction at TRISD6_bit;
sbit LCD_D7_Direction at TRISD7_bit;

enum { FALSE = 0, TRUE = 1 };
char temp_str[8];
unsigned long sampleCounter = 0; // Used to determine pulse timing
unsigned long lastBeatTime = 0; // Used to find IBI
int rate[10]; // Array to hold last 10 IBI values
int thresh = 530; // Threshold to detect pulse
int amp = 100; // Pulse waveform amplitude
int BPM = 0; // Calculated heart rate in BPM
unsigned int Signal; // Holds the raw ADC value
unsigned int IBI = 600; // Time between beats
unsigned int Pulse = 0; // TRUE when a pulse is detected
unsigned int QS = 0; // TRUE when a new pulse is detected
int runningTotal = 0; // Running total of IBI values for averaging
unsigned int firstBeat = 1, secondBeat = 0;

void Init() {
    OPTION_REG = 0x87; // Use internal clock Fosc/4 with a prescaler of 256
    TMR0 = 248; // Timer will overflow every 1ms
    INTCON = 0b11100000; // Enable global and Timer0 interrupts
}

void ADC_init(void) {
    ADCON0 = 0x41; // Turn on ADC, select channel 0
    ADCON1 = 0xCE; // Configure RA0 as analog, others digital
}

unsigned int ADC_read(void) {
    ADCON0 |= 0x04; // Start ADC conversion
    while (ADCON0 & 0x04); // Wait for conversion to complete
    return (ADRESH << 8) | ADRESL; // Combine high and low result bytes
}
int timeSinceLastBeat;
int i;
void calculateBPM() {
    Signal = ADC_read(); // Read signal from ADC
    sampleCounter += 2; // Increment sample counter (2ms per interrupt)
    timeSinceLastBeat = sampleCounter - lastBeatTime;

    // Detect trough
    if (Signal < thresh && timeSinceLastBeat > (IBI * 3) / 5) {
        if (Signal < amp) amp = Signal;
    }

    // Detect peak and pulse
    if (Signal > thresh && !Pulse && timeSinceLastBeat > (IBI * 3) / 5) {
        Pulse = TRUE; // Mark pulse as detected
        IBI = sampleCounter - lastBeatTime; // Calculate time between beats
        lastBeatTime = sampleCounter; // Update last beat time

        if (secondBeat) {
            secondBeat = FALSE;
            for (i = 0; i < 10; i++) rate[i] = IBI; // Seed array
        }

        if (firstBeat) {
            firstBeat = FALSE;
            secondBeat = TRUE;
            return; // Ignore first beat
        }

        // Shift and average IBI values
        runningTotal = 0;
        for (i = 0; i < 9; i++) {
            rate[i] = rate[i + 1];
            runningTotal += rate[i];
        }
        rate[9] = IBI;
        runningTotal += rate[9];
        runningTotal /= 10;

        BPM = 60000 / runningTotal; // Calculate BPM
        QS = TRUE; // Mark new beat
    }

    // Reset Pulse when signal drops below threshold
    if (Signal < thresh && Pulse) {
        Pulse = FALSE;
        amp = Signal;
        thresh = amp + ((530 - amp) / 2); // Adjust threshold
    }

    // Reset values if no beat is detected for 2.5 seconds
    if (timeSinceLastBeat > 2500) {
        thresh = 530;
        amp = 100;
        lastBeatTime = sampleCounter;
        firstBeat = TRUE;
        secondBeat = FALSE;
    }
}

void interrupt() {
    if (INTCON & 0x04) { // Timer0 overflow interrupt
        TMR0 = 248; // Reload Timer0 for 1ms overflow
        calculateBPM(); // Calculate BPM
        INTCON &= 0xFB;
}
}
void main() {
    Lcd_Init(); // Initialize LCD
    Lcd_Cmd(_LCD_CLEAR); // Clear display
    Lcd_Cmd(_LCD_CURSOR_OFF); // Turn off cursor
    Delay_ms(200);
    TRISD &= 0xFE;
    ADC_init(); // Initialize ADC
    Init(); // Initialize Timer0 and interrupts

    while (1) {
        if (QS) { // New beat detected
            QS = FALSE; // Clear flag
            Lcd_Cmd(_LCD_CLEAR); // Clear display
            sprintl(temp_str, "BPM = %d", BPM); // Format BPM
            Lcd_Out(1, 1, temp_str); // Display BPM on LCD
        }
        Delay_ms(100); // Small delay
        if (PORTD & 0xFE)
{
PORTD &=0xFE;
    }
else{
PORTD |=0x01;
}
}
}
